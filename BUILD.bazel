load(
    "@bazel_skylib//rules:common_settings.bzl",
    "bool_flag",
    "string_list_flag",
)
load("@rules_erlang//:dialyze.bzl", "plt")
load("@rules_erlang//:shell.bzl", "shell")
load(":rabbitmq_home.bzl", "rabbitmq_home")
load(":rabbitmq_run.bzl", "rabbitmq_run", "rabbitmq_run_command")
load(":rabbitmqctl.bzl", "rabbitmqctl")
load(":dist.bzl", "packages_generic_unix")
load(
    ":rabbitmq.bzl",
    "ERLANG_23_INSTALLATION",
    "ERLANG_INSTALLATIONS",
    "all_plugins",
)

exports_files([
    "scripts/bazel/rabbitmq-run.sh",
    "scripts/bazel/rabbitmq-run.bat",
])

config_setting(
    name = "debug_build",
    values = {
        "compilation_mode": "dbg",
    },
)

string_list_flag(
    name = "elixir_home",
    build_setting_default = [],
    visibility = ["//visibility:public"],
)

bool_flag(
    name = "use_external_elixir",
    build_setting_default = False,
    visibility = ["//visibility:public"],
)

platform(
    name = "erlang_git_platform",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
        "@bazel_tools//tools/cpp:clang",
    ],
    exec_properties = {
        "OSFamily": "Linux",
        # linux-erlang-git-master
        "container-image": "docker://pivotalrabbitmq/rabbitmq-server-buildenv@sha256:5d4fa38f723186668a497a8ee57e22010187e9347add5d4a7cc199dc13f1493f",
    },
)

plt(
    name = "base_plt",
    visibility = ["//visibility:public"],
)

rabbitmq_home(
    name = "broker-home",
    plugins = all_plugins(
        erlang_installation = ERLANG_23_INSTALLATION,
        rabbitmq_workspace = "",
    ),
)

rabbitmq_run(
    name = "rabbitmq-run",
    erlang_installation = ERLANG_23_INSTALLATION,
    home = ":broker-home",
    visibility = ["//visibility:public"],
)

# Allow us to `bazel run broker`
# for the equivalent of `make run-broker`
rabbitmq_run_command(
    name = "broker",
    rabbitmq_run = ":rabbitmq-run",
    subcommand = "run-broker",
)

# `bazel run rabbitmqctl`
rabbitmqctl(
    name = "rabbitmqctl",
    home = ":broker-home",
    visibility = ["//visibility:public"],
)

rabbitmqctl(
    name = "rabbitmq-diagnostics",
    home = ":broker-home",
)

rabbitmqctl(
    name = "rabbitmq-plugins",
    home = ":broker-home",
)

shell(
    name = "repl",
    erlang_installation = ERLANG_23_INSTALLATION,
    deps = all_plugins(
        erlang_installation = ERLANG_23_INSTALLATION,
        rabbitmq_workspace = "",
    ),
)

packages_generic_unix(
    erlang_installations = ERLANG_INSTALLATIONS,
)

genrule(
    name = "test-logs",
    outs = ["open-test-logs.sh"],
    cmd = """set -euo pipefail
cat << 'EOF' > $@
    set -euo pipefail
    if [ $$# -eq 0 ]; then
        echo "Usage: bazel run test-logs TEST_LABEL [shard_index]"
        exit 1
    fi

    RELATIVE=$${1#//}
    PACKAGE=$${RELATIVE%%:*}
    SUITE=$${RELATIVE##*:}
    OUTPUT_DIR=test.outputs
    if [ $$# -gt 1 ]; then
        OUTPUT_DIR=shard_$$2_of_*/test.outputs
    fi
    open bazel-testlogs/$$PACKAGE/$$SUITE/$$OUTPUT_DIR/index.html
EOF
""",
    executable = True,
)

genrule(
    name = "remote-test-logs",
    outs = ["open-remote-test-logs.sh"],
    cmd = """set -euo pipefail
cat << 'EOF' > $@
    set -euo pipefail
    if [ $$# -eq 0 ]; then
        echo "Usage: bazel run remote-test-logs TEST_LABEL [shard_index]"
        exit 1
    fi

    RELATIVE=$${1#//}
    PACKAGE=$${RELATIVE%%:*}
    SUITE=$${RELATIVE##*:}
    OUTPUT_DIR=test.outputs
    if [ $$# -gt 1 ]; then
        OUTPUT_DIR=shard_$$2_of_*/test.outputs
    fi
    TESTLOGS=$$(echo $$(bazel info output_path)/k8-*/testlogs)
    cd $$TESTLOGS/$$PACKAGE/$$SUITE/$$OUTPUT_DIR && unzip outputs.zip
    open $$TESTLOGS/$$PACKAGE/$$SUITE/$$OUTPUT_DIR/index.html
EOF
""",
    executable = True,
)

genrule(
    name = "test-node-data",
    outs = ["open-test-node-data.sh"],
    cmd = """set -euo pipefail
cat << 'EOF' > $@
    set -euo pipefail
    if [ $$# -eq 0 ]; then
        echo "Usage: bazel run test-node-data TEST_LABEL [shard_index]"
        exit 1
    fi

    RELATIVE=$${1#//}
    PACKAGE=$${RELATIVE%%:*}
    SUITE=$${RELATIVE##*:}
    OUTPUT_DIR=test.outputs
    if [ $$# -gt 1 ]; then
        OUTPUT_DIR=shard_$$2_of_*/test.outputs
    fi
    open bazel-testlogs/$$PACKAGE/$$SUITE/$$OUTPUT_DIR/ct_run.*/deps.*/run.*/log_private
EOF
""",
    executable = True,
)

# NOTE: this rule may not work properly if --remote_download_minimal has been used,
#       which is currently the default for remote runs
genrule(
    name = "remote-test-node-data",
    outs = ["open-remote-test-node-data.sh"],
    cmd = """set -euo pipefail
cat << 'EOF' > $@
    set -euo pipefail
    if [ $$# -eq 0 ]; then
        echo "Usage: bazel run remote-test-node-data TEST_LABEL [shard_index]"
        exit 1
    fi

    RELATIVE=$${1#//}
    PACKAGE=$${RELATIVE%%:*}
    SUITE=$${RELATIVE##*:}
    OUTPUT_DIR=test.outputs
    if [ $$# -gt 1 ]; then
        OUTPUT_DIR=shard_$$2_of_*/test.outputs
    fi
    TESTLOGS=$$(echo $$(bazel info output_path)/k8-*/testlogs)
    cd $$TESTLOGS/$$PACKAGE/$$SUITE/$$OUTPUT_DIR && unzip outputs.zip
    open $$TESTLOGS/$$PACKAGE/$$SUITE/$$OUTPUT_DIR/index.html
    open $$TESTLOGS/$$PACKAGE/$$SUITE/$$OUTPUT_DIR/ct_run.*/deps.*/run.*/log_private
EOF
""",
    executable = True,
)
